// Code generated by MockGen. DO NOT EDIT.
// Source: targets/targets.go

// Package targets is a generated GoMock package.
package targets

import (
	credentials "github.com/coveooss/credentials-sync/credentials"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTarget is a mock of Target interface
type MockTarget struct {
	ctrl     *gomock.Controller
	recorder *MockTargetMockRecorder
}

// MockTargetMockRecorder is the mock recorder for MockTarget
type MockTargetMockRecorder struct {
	mock *MockTarget
}

// NewMockTarget creates a new mock instance
func NewMockTarget(ctrl *gomock.Controller) *MockTarget {
	mock := &MockTarget{ctrl: ctrl}
	mock.recorder = &MockTargetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTarget) EXPECT() *MockTargetMockRecorder {
	return m.recorder
}

// BaseValidateConfiguration mocks base method
func (m *MockTarget) BaseValidateConfiguration() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BaseValidateConfiguration")
	ret0, _ := ret[0].(bool)
	return ret0
}

// BaseValidateConfiguration indicates an expected call of BaseValidateConfiguration
func (mr *MockTargetMockRecorder) BaseValidateConfiguration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BaseValidateConfiguration", reflect.TypeOf((*MockTarget)(nil).BaseValidateConfiguration))
}

// GetName mocks base method
func (m *MockTarget) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockTargetMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockTarget)(nil).GetName))
}

// GetTags mocks base method
func (m *MockTarget) GetTags() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTags")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetTags indicates an expected call of GetTags
func (mr *MockTargetMockRecorder) GetTags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockTarget)(nil).GetTags))
}

// ShouldDeleteUnsynced mocks base method
func (m *MockTarget) ShouldDeleteUnsynced() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldDeleteUnsynced")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldDeleteUnsynced indicates an expected call of ShouldDeleteUnsynced
func (mr *MockTargetMockRecorder) ShouldDeleteUnsynced() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldDeleteUnsynced", reflect.TypeOf((*MockTarget)(nil).ShouldDeleteUnsynced))
}

// ShouldTagUnsynced mocks base method
func (m *MockTarget) ShouldTagUnsynced() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldTagUnsynced")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldTagUnsynced indicates an expected call of ShouldTagUnsynced
func (mr *MockTargetMockRecorder) ShouldTagUnsynced() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldTagUnsynced", reflect.TypeOf((*MockTarget)(nil).ShouldTagUnsynced))
}

// GetExistingCredentials mocks base method
func (m *MockTarget) GetExistingCredentials() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExistingCredentials")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetExistingCredentials indicates an expected call of GetExistingCredentials
func (mr *MockTargetMockRecorder) GetExistingCredentials() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExistingCredentials", reflect.TypeOf((*MockTarget)(nil).GetExistingCredentials))
}

// Initialize mocks base method
func (m *MockTarget) Initialize(arg0 []credentials.Credentials) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize
func (mr *MockTargetMockRecorder) Initialize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockTarget)(nil).Initialize), arg0)
}

// ToString mocks base method
func (m *MockTarget) ToString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToString")
	ret0, _ := ret[0].(string)
	return ret0
}

// ToString indicates an expected call of ToString
func (mr *MockTargetMockRecorder) ToString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToString", reflect.TypeOf((*MockTarget)(nil).ToString))
}

// DeleteCredentials mocks base method
func (m *MockTarget) DeleteCredentials(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCredentials", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCredentials indicates an expected call of DeleteCredentials
func (mr *MockTargetMockRecorder) DeleteCredentials(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCredentials", reflect.TypeOf((*MockTarget)(nil).DeleteCredentials), id)
}

// UpdateCredentials mocks base method
func (m *MockTarget) UpdateCredentials(arg0 credentials.Credentials) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCredentials", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCredentials indicates an expected call of UpdateCredentials
func (mr *MockTargetMockRecorder) UpdateCredentials(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCredentials", reflect.TypeOf((*MockTarget)(nil).UpdateCredentials), arg0)
}

// ValidateConfiguration mocks base method
func (m *MockTarget) ValidateConfiguration() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateConfiguration")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ValidateConfiguration indicates an expected call of ValidateConfiguration
func (mr *MockTargetMockRecorder) ValidateConfiguration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateConfiguration", reflect.TypeOf((*MockTarget)(nil).ValidateConfiguration))
}

// MockTargetCollection is a mock of TargetCollection interface
type MockTargetCollection struct {
	ctrl     *gomock.Controller
	recorder *MockTargetCollectionMockRecorder
}

// MockTargetCollectionMockRecorder is the mock recorder for MockTargetCollection
type MockTargetCollectionMockRecorder struct {
	mock *MockTargetCollection
}

// NewMockTargetCollection creates a new mock instance
func NewMockTargetCollection(ctrl *gomock.Controller) *MockTargetCollection {
	mock := &MockTargetCollection{ctrl: ctrl}
	mock.recorder = &MockTargetCollectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTargetCollection) EXPECT() *MockTargetCollectionMockRecorder {
	return m.recorder
}

// AllTargets mocks base method
func (m *MockTargetCollection) AllTargets() []Target {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllTargets")
	ret0, _ := ret[0].([]Target)
	return ret0
}

// AllTargets indicates an expected call of AllTargets
func (mr *MockTargetCollectionMockRecorder) AllTargets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllTargets", reflect.TypeOf((*MockTargetCollection)(nil).AllTargets))
}

// ValidateConfiguration mocks base method
func (m *MockTargetCollection) ValidateConfiguration() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateConfiguration")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ValidateConfiguration indicates an expected call of ValidateConfiguration
func (mr *MockTargetCollectionMockRecorder) ValidateConfiguration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateConfiguration", reflect.TypeOf((*MockTargetCollection)(nil).ValidateConfiguration))
}
